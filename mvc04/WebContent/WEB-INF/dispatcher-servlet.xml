<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan
		base-package="org.springframework.samples.petclinic.web" />
		
		<!-- ※ 사용자 정의 Controller 객체 등록 및 URL 매핑 주소 등록 -->
		<!--    - 『name=""』 속성에 매핑 주소를 등록한다. -->
		<!--      이 과정에서 Front Controller 가 갖고 있는 확장자의 형태로 구성한다. -->
		<!--    - 『class=""』 속성은 Controller 객체의 클래스 경로 및 이름을 등록한다. -->
		
		
		<!-- #19. dispatcher-servlet.xml -->
		
		<!-- DataSource, DAO 여러 개 등록될 수 있음 -->
		
		<!-- DataSource 등록 → SimpleDriverDataSource -->
		<bean id="localDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="url" value="jdbc:oracle:thin:@211.238.142.152:1521:xe"></property>
			<property name="username" value="scott"></property>
			<property name="password" value="tiger"></property>
		</bean>
		
		<bean id="remoteDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="url" value="jdbc:oracle:thin:@211.238.142.153:1521:xe"></property>
			<property name="username" value="scott"></property>
			<property name="password" value="tiger"></property>
		</bean>
		
		
		<!-- DAO 등록 -->
		<bean id="employeeDAO" class="com.test.mvc.EmployeeDAO">
			<!-- employeeDAO 도 property setting이 필요함 (dataSource) -->
			<!-- 참조할 수 있도록 dataSource 등록해야함 -->
			<property name="dataSource" ref="localDataSource"></property>
			<!-- └→ localDataSource, remoteDataSource 등 위에 등록된 DataSource 사용가능 -->
		</bean>
		
		<bean id="regionDAO" class="com.test.mvc.RegionDAO">
			<property name="dataSource" ref="localDataSource"></property>
		</bean>
		
		<bean id="departmentDAO" class="com.test.mvc.DepartmentDAO">
			<property name="dataSource" ref="localDataSource"></property>
		</bean>
		
		<bean id="positionDAO" class="com.test.mvc.PositionDAO">
			<property name="dataSource" ref="localDataSource"></property>
		</bean>
		
		
		<!-- AJAX 관련 Controller 등록 -->
		<bean name="/ajax.action" class="com.test.mvc.AjaxController">
			<property name="dao" ref="employeeDAO"></property>
		</bean>
		
		
		<!-- Employee 관련 Controller 동록 -->
		<bean name="/employeelist.action" class="com.test.mvc.EmployeeListController">
			<!-- dao property 등록 -->
			<!-- ref: 참고할 수 있는 무언가가 있어야 하니까 위에서 DAO 등록해야함 -->
			<!-- 'dao 객체 생성해서 employeeDAO 주입시켜줘'라는 의미 -->
			<property name="dao" ref="employeeDAO"></property>
		</bean>
		
		<bean name="/employeeinsertform.action" class="com.test.mvc.EmployeeInsertFormController">
			<property name="dao" ref="employeeDAO"></property> 
		</bean>		
		
		<bean name="/employeeinsert.action" class="com.test.mvc.EmployeeInsertController">
      		<property name="dao" ref="employeeDAO"></property>
   		</bean>
   		
   		<bean name="/employeeupdateform.action" class="com.test.mvc.EmployeeUpdateFormController">
   			<!-- 앞에 name 의 속성값이 의미하는 것은 EmployeeUpdateFormController의 속성 이름을 의미한다. -->
   			<!-- 그럼 걔에 해당하는 setter()를 호출하는 것 -->
			<!-- ref의 속성값은 dispatcher-servlet 에 등록해놓은 employeeDAO -->
			<!-- name 속성값은 해당 클래스에 속성값 이름과 setter 있으면 된다. -->
			<!-- → 이름 수정하면 setter 메소드까지 꼭 같이 수정해줘야 함 -->	
   			<property name="employeeDAO" ref="employeeDAO"></property>
   			<property name="regionDAO" ref="regionDAO"></property>
   			<property name="departmentDAO" ref="departmentDAO"></property>
   			<property name="positionDAO" ref="positionDAO"></property>
   		</bean>
   		
   		<bean name="/employeeupdate.action" class="com.test.mvc.EmployeeUpdateController">
   			<property name="dao" ref="employeeDAO"></property>
   		</bean>
   		
   		<bean name="/employeedelete.action" class="com.test.mvc.EmployeeDeleteController">
			<property name="dao" ref="employeeDAO"></property>
		</bean>
		
		<bean name="/emplist.action" class="com.test.mvc.EmpListController">
			<property name="dao" ref="employeeDAO"></property>
		</bean>
	
	
	
		<!-- Region 관련 Controller 등록 -->
		<bean name="/regionlist.action" class="com.test.mvc.RegionListController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/reglist.action" class="com.test.mvc.RegListController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/regioninsertform.action" class="com.test.mvc.RegionInsertFormController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/regioninsert.action" class="com.test.mvc.RegionInsertController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/regionupdateform.action" class="com.test.mvc.RegionUpdateFormController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/regionupdate.action" class="com.test.mvc.RegionUpdateController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
		
		<bean name="/regiondelete.action" class="com.test.mvc.RegionDeleteController">
			<property name="dao" ref="regionDAO"></property>
		</bean>
	
	
		<!-- Login 및 Logout 관련 Controller 등록 -->
		<!-- view 페이지만 지정해주면 끝나기 때문에 controller만 bean에 등록해주면 된다. -->
		<bean name="/loginform.action" class="com.test.mvc.LoginFormController">
		</bean>
		
		<bean name="/login.action" class="com.test.mvc.LoginController">
			<property name="dao" ref="employeeDAO"></property>
		</bean>
		
		<bean name="/logout.action" class="com.test.mvc.LogoutController">
		</bean>
		
</beans>
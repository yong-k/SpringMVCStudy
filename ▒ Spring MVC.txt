■■■ Spring MVC ■■■
	└→ 스프링의 꽃	

* 지금까지는 콘솔개념으로 Spring Framework 살펴봤다.
  └→ 웹 안에 숨겨진 형태로 들여다보면 IoC/DI 개념 파악하기 어렵기 때문에
       이제부터는 web container, spring container 안에서 그 일이 일어날거라서
       더 집중해서 봐야한다.

★ 클라이언트의 요청이 진입하는 지점이 어디로 향하느냐! ★
 → MVC 패턴이 적용된 어플리케이션이냐, 아니냐 알 수 있음!! (매우 중요함)
    클라이언트가 바로 문 열고, '누구 나와' 하는거 아니고,
    그 직원들 관리하는 관리자(controller)와 얘기하고, controller가 보냄

→ Spring MVC 에서 클라이언트의 요청이 진입하는 지점 : front controller


* 컨트롤러 아래에 Modle과 View 있는 트리 구조인데,
  그런 트리가 여러 개 있는데
  Spring Framework에서 MVC 모델 적용하면,
  그 MVC 트리 위에 네모 하나 더 있는 모양
	           ----
		   └→ 안내데스크 느낌


ex) 		  ┌ C1(자재부매니저) MV(직원들)
    안내데스크──┿ C2(인사부매니저) MV(직원들)
    ----------	  └ C3(영업부매니저) MV(직원들)
 (front controller)
 Spring이 담당
 그 중에서도
 DispatcherServlet이 담당

→ 우리는 MVC 구성하고,
   그 환경안에서 약속 돌아갈 수 있도록 Spring에게 기술서 넘겨주면 된다.

	
 		   ┌→ Controller가 주인공: 실제로 하는 일은 없음
		   │                        지시, 교통정리 담당
1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework
   Spring 에서는 DispatcherServlet 클래스가 컨트롤러 역할을 수행하게 된다.


2. Spring MVC 의 주요 구성요소
   - DispatcherServlet → Controller 역할
   - HandlerMapping
   - Controller : 사용자 정의 Controller. 액션 처리. 우리가 작성.
   - ModelAndView (내부적으로 있는거 사용)
   - ViewResolver (Spring에서 제공해주는 내용 돌아감)
   - view : 결과 출력. 우리가 작성. → 우리가 작성하지만, 
	    우리가 작성한게 클라이언트와 만나지 않음. 
	    우리가 그려낸 view로 spring이 그려낸 것이 
            클라이언트와 만나게 될 것이다.
   - web.xml : DispatcherServlet 객체 등록. 우리가 작성
   - dispatcher-servlet.xml : Controller 객체 등록. 우리가 작성.
     ----------------------
      앞으로는
      이름 꼭 이거여야 함!!


+)
어떤 부품 유형 납품해야하는지 샘플받아가려구요
DispatcherServlet → 부품,자재가 뭐지? 담당하는 사람 있어? 
		  → HandlerMapping에게 물어봄 : 자재부에 연락하면 됩니다
		  → Controller(자재부매니저)에게 연락하는데 얘도 잘 모르니까
                     그 일 담당하는 ModelAndView 넘겨줌
→ 클라이언트와 실제 만나는 건 ModelAndView지만 
   실제 요청은 DispatcherServlet 에게 들어간 것이기 때문에
   클라이언트는 DispatcherServlet 이 처리한 줄 안다.
		  
	
3. Spring MVC 실행 흐름
   - 사용자 요청 → DispatcherServlet
   - DispatcherServlet → HandlerMapping 에 주소 분석 요청
   - DispatcherServlet → 특정 Controller 객체 호출 및 결과 수신
			  결과는 ModelAndView 객체

   ※ ModelAndView 객체
      : View 객체 정보와 결과값이 들어있는 객체
   - DispatcherServlet → ViewResolver 에 View 객체 분석 요청
   - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고
                          결과 출력


4. Spring MVC 에서 우리가 해야 할 일
   - Controller
     액션 처리를 담당하는 Controller 클래스 작성
     Annotation 을 사용하지 않으면, Controller 인터페이스를 구현하여 작성
	└→ 사용자 정의 컨트롤러를 우리가 만들어야 하고,
	     이걸 만드는 과정에서 annotation 사용하거나 
	     아니면 framework 답게 Controller 인터페이스를 구현하여 작성

   - View
     결과 출력용 JSP 페이지 작성

   - web.xml
     서블릿 주소와 DispatcherServlet 클래스 등록
	└→ 어떤 요청이 들어왔을 때, 
	     이젠 다 front-controller로 가야하기 때문에
	     DispatcherServlet으로 보내야지 하고 인계해주는거

   - dispatcher-servlet.xml   
     우리가 작성한 Controller 객체 등록
     URL 매핑 주소 등록
	└→ 우리가 작성한대로 분기되게 작성해줘야 한다.


※ Spring 이 스트럿츠를 비롯하여 다양한 웹 프레임워크와
   비교적 연동이 잘 되는 편이기는 하지만
   서로 다른 두 프레임워크를 연동하기 위해서는
   설정의 중복 등 개발 과정에서 불편함이 존재할 수 밖에 없다.
   따라서, Spring 이 자체적으로 제공하는 MVC 프레임워크를 사용하게 되면
   Spring 이 제공하는 AOP, 트랜잭션 처리, IoC/DI 등의 기능을
   그대로 사용하면서 MVC 패턴에 기반하여 웹 어플리케이션을 개발할 수 있다.
   또한, 다른 프레임워크와 Spring 을 연동하기 위해서
   설정을 중복해서 적용해야 한다던지... 하는 개발 과정에서 나타나는
   불편을 해소할 수 있게 된다.       


--------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 01 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc01 > web.xml generate 체크 후 finish

○ 톰캣 서버 등록 및 포트(port) 설정
   : port 8090 / URIEncoding="UTF-8"   (→ server.xml 에서 변경)

○ 기타 환경 설정
   : 폰트, 줄번호, 편집포맷, 인코딩방식, 템플릿 등...

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : WebContent > WEB-INF > lib 경로에 등록
     - 경로1 → C:\s-f-3.0.2-with-docs\dist
       ·파일1 : org.springframework.aop-3.0.2.RELEASE.jar
       ·파일2 : org.springframework.asm-3.0.2.RELEASE.jar
       ·파일3 : org.springframework.beans-3.0.2.RELEASE.jar
       ·파일4 : org.springframework.context-3.0.2.RELEASE.jar
       ·파일5 : org.springframework.core-3.0.2.RELEASE.jar
       ·파일6 : org.springframework.expression-3.0.2.RELEASE.jar
       ·파일7 : org.springframework.jdbc-3.0.2.RELEASE.jar
       ·파일8 : org.springframework.transaction-3.0.2.RELEASE.jar
       ·파일9 : org.springframework.web.servlet-3.0.2.RELEASE.jar
       ·파일10: org.springframework.web-3.0.2.RELEASE.jar
 
     - 경로2 → C:\s-f-3.0.2-dependencies\org.apache.commons
	        \com.springsource.org.apache.commons.logging\1.1.1
       ·파일11: com.springsource.org.apache.commons.logging-1.1.1.jar

     - 경로3 → C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 
 		(오라클 설치 경로)
       ·파일12: ojdbc6.jar 

     - 경로4 → C:\Downloads\15_JSTL\jakarta-taglibs-standard-1.1.2\lib 
 		(JSTL 다운로드 경로)
       ·파일13: jstl.jar   
       ·파일14: standard.jar

○ 물리적 파일 구성
   - HelloController.java
   - Hello.jsp
   - dispatcher-servlet.xml  (←이름 이거랑 다르면 안됨. applicationContext, config.xml 이라고 작성했던것과 형식 좀 다름)
   - web.xml
   - hello.action → 그냥 빈 file (실행 편하게 하려고 생성)	

   ※ 『dispatcher-servlet.xml』 파일의 기본 설정 내용(템플릿)을 복사하기 위해
      스프링 DOC 의 내용을 참고해서 작성할 수 있도록 한다.
      ·경로 → C:\s-f-3.0.2-with-docs\docs\spring-framework-reference\pdf
      ·파일 → spring-frawmework-reference.pdf
      ·내용(위치) → pdf 450page (문서형식상 425page)
      ·해당 위치로 이동하면 XML 파일에 대한 샘플 코드가 있다.
        이 내용을 복사해서 dispatcher-servlet.xml 파일의 기본 내용으로 작성한다.


○ 사용자 최초 요청 주소
http://localhost:8090/mvc01/hello.action


※ 우리가 작성한 mvc01 프로젝트의 실행 및 처리 과정 정리

   ① 외부 요청
      http://localhost:8090/mvc01/hello.action

      → web.xml 관여
         (→ Front Controller 등록 → DispatcherServlet 등록)

   ② DispatcherServlet 요청 접수
      
      → web.xml → DispatcherServlet 등록
         web.xml → URL 패턴 등록

      → 사용자 요청 분석 → 특정 컨트롤러 지정

   ③ 해당 컨트롤러의 특정 메소드 호출(액션 처리, ModelAndView 객체 반환)
      
      → 사용자의 요청에 맞는 액션 처리

      → 결과 데이터가 들어있는 모델 객체 준비

      → 뷰 정보(JSP 페이지 정보) 반환

         ※ JSP 페이지 정보
            - 여기서는 객체가 아닌 경로 포함된 View 페이지의 이름

   ④ 뷰 페이지에서 최종 웹 페이지를 작성

      → JSP 페이지 내에서 EL 이나 JSTL 등의 표기 사용 가능
	 │
	 └→ ④번은 그냥 내용 전달만 하고 끝나는 것이 아니라
	      JSP 페이지 내에서 HTML document 그리는 것이다.

   ⑤ 응답 완료~!!!


- 파일 흐름
무슨 파일달라고 요청들어오면
web.xml 에서 dispatcher-servlet 찾아가라고 안내해줘야 할 것이다.
1) web.xml 작성
2) dispatcher-servlet.xml
3) HelloController.java  <- /hello.action 에 의해서 여기로 옴
4) web-inf에 view 폴더 생성 (web00에서도 해주기)	
5) view 폴더 안에 > Hello.jsp 파일 생성
   			└→ HelloController.java로 부터 message 를 수신함
6) webcontent 안에 hello.action 파일 생성 후, 
   그 파일에서 ctrl+11


web.xml
    *.action 으로 요청들어오면 web.xml 에서 
    dispatcher인 servlet-name 찾아서 mapping
    DispatcherServlet 한테 요청 인계됨

dispatcher-servlet.xml
    *.action 이라고 하기는 했는데
    그게 자재부, 인사부, 영업부 중 어디로 향한 것인지 확인
    그리고 해당 요청에 대해서 분기 처리

HelloController.java
    그럼 해당 controller 일함
    실제 클라이언트 만나는 view는 어디에 있는 누구고,
    전달해야할 내용은 addObject() 로 전달

Hello.jsp
    그럼 view 페이지에서 그 내용 수신해서 클라이언트 만남

→ 지금 model 은 안 만듦

나중에는 model한테 물어볼예정
컨트롤러가 모델을 통해서 그거 얻어내서,그거 뷰에게 전달해줄거임

모델은 action 처리해주는게 제일 큼
클라이언트가 게시물 번호 10 넘겨줬는데 어떻게 하느냐
클라이언트가 어떤 게시물 열람했으면 모델한테 그 사실 넘겨서
모델이 어떤 처리하게 하느냐
모델은 10번 게시물에 대해서 조회 1 올려야하면
컨트롤러한테 알림
너가 나한테 넘겨준 게시물 조회수1 증가시켰어
컨트롤러입장에서 자기가 원하는 거 됐으면
뷰한테 그거 1 증가햇는지 확인해봐 하는거



--------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 02 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc02 

○ 기본 환경 구성 및 라이브러리 생성
   : mvc00 (우리가 임의로 만들어둔 샘플)로부터
     src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
   : 데이터 송수신 관련 실습 (Spring MVC 버전)

○ 물리적 파일 구성 : Model은 지금 해야 할 일 없음
   - SendController.java	→ 컨트롤러 객체
   - Send.jsp			→ 뷰 객체	

   - ReceiveController.java	→ 컨트롤러 객체
   - Receive.jsp		→ 뷰 객체

   - dispatcher-servlet.xml  	→ 컨트롤러 객체 등록 / URL 매핑 주소 등록
   - web.xml			→ DispatcherServlet 객체 등록 / URL 매핑 주소 등록


○ 사용자 최초 요청 주소
http://localhost:8090/mvc02/send.do


-파일 작성 순서
SendController.java : 클라이언트의 요청 들어왔을 때, 'Send.jsp' view 내보내겠다고 함
Send.jsp
web.xml : *.do면 dispatcher-servlet.xml 로 안내	
dispatcher-servlet.xml : 어떤 .do 인지 확인해서 분기처리
 			 /send.do 작성
ReceiveController.java
Receive.jsp
dispatcher-servlet.xml : /receive.do 작성


-파일 흐름 순서 : 처음 요청 『send.do』
web.xml
dispatcher-servlet.xml
SendController.java
Send.jsp → 『receive.do』 요청 넘어옴
web.xml
dispatcher-servlet.xml
ReceiveController.java
Receive.jsp


--------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc03

○ 기본 환경 구성 및 라이브러리 생성
   : mvc00 (우리가 임의로 만들어둔 샘플)로부터
     src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
   : 데이터 송수신 관련 실습 (Spring MVC 버전)
     JDBC 모듈 추가 활용
     SimpleDriverDataSource 클래스(객체) 활용
     (→ JDBC Driver 조금 더 쉽게 사용할 수 있게 해줌)
     (   스프링에서 제공해주는 거!)

○ 기능 구현
   : 사용자로부터 이름, 전화번호 정보를 입력받아 데이터베이스에 저장
     저장된 이름, 전화번호 항목을 데이터베이스로부터 읽어 화면에 구성

○ 사전 작업
   - TBL_MEMBERLIST 테이블 생성
   - MEMBERLISTSEQ 시퀀스 생성
   - 샘플 데이터 입력

○ 기본 레이아웃(페이지 화면 구성)
   이름 [      ]	→ <input type="text">
   전화 [      ]	→ <input type="text">
   <회원 추가>		→ <button type="button">

   전체 인원 수 : 2명	→ <p>...</p>
   ------------------	→ <table>...</table>
   번호 이름 전화번호
    1   박.. 010...
    2   김.. 010...
   ------------------

★★★★★★★★★★★★★★★★★★★★★★★★★
요청진입 지점은 항상 컨트롤러!!!
이건 예외가 있으면 안된다.
모든 클라이언트의 요청은 컨트롤러를 향해야 한다.
그게 MVC의 기본!!!!!!
★★★★★★★★★★★★★★★★★★★★★★★★★

○ 물리적 파일 구성 
   - mvc03_scott.sql		→ 데이터베이스 관련 객체 구성 및 실습 데이터 준비

   - MemberDTO.java		→ 사용자 정의 자료형 클래스(DTO 활용)

   - IMemberDAO.java		→ 인터페이스(→ 인터페이스 모양으로 구멍 뚫어놓을 예정이니)
   - MemberDAO.java		→ 데이터베이스 액션 처리 클래스		│
				   Connection 객체에 대한 의존성 주입		│
				   (의존성 주입 준비 → setter 메소드 추가) ←─┘

       스프링의 핵심 철학 → 유연성
       우리 예전에도 mssqlDAO, oracleDAO 만들면서 '인터페이스' 만들었음!!!

   - MemberListController.java	→ 사용자 정의 컨트롤러 클래스
				   리스트 출력 액션
				   DAO 객체에 대한 의존성 주입
				   (의존성 주입 준비 → setter 메소드 추가)

   - MemberList.jsp		→ 회원 리스트 출력용 뷰
				   회원 데이터 추가 폼 화면 구성

   - MemberInsertController.java→ 사용자 정의 컨트롤러 클래스
				   회원 데이터 추가 액션
				   DAO 객체에 대한 의존성 주입
				   (의존성 주입 준비 → setter 메소드 추가)
      └→ 여기서는 다 하고 나면 list로 돌아가게 할 거라 view 페이지 따로 구성 안함
				   
   - dispatcher-servlet.xml  	→ 컨트롤러 객체 등록 
				   URL 매핑 주소 등록
				   SimpleDriverDataSource 객체 등록
				   의존 객체 주입 설정 (위에 의존 객체 만들어놨기 때문에)
				   DAO 객체 등록

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록
				   └→ 우리가 실습해놓은거에서 많이 건드릴 필요 없음


○ 사용자 최초 요청 주소 
http://localhost:8090/mvc03/memberlist.do
→ 사용자가 검색하는 url은 검색하기 편하게 소문자로 구성하는게 일반적
   사실상 클라이언트와 만나는 MemberList.jsp는 대문자 있음~!


-파일 작성 순서
mvc03_scott.sql
MemberDTO.java
IMemberDAO.java
MemberDAO.java
MemberListController.java
MemberList.jsp
web.xml (뭐 작성하지는 않고 그냥 봄)
dispatcher-servlet.xml
MemberList.jsp (jquery 코드작성, form action 속성 작성)
MemberInsertController.java
dispatcher-servlet.xml



--------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 04 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc04

○ 기본 환경 구성 및 라이브러리 생성
   : mvc00 (우리가 임의로 만들어둔 샘플)로부터
     src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
   : 직원 관리 프로그램 (Spring MVC 버전)
     JDBC 모듈 추가 활용
     SimpleDriverDataSource 클래스(객체) 활용
     (→ JDBC Driver 조금 더 쉽게 사용할 수 있게 해줌)
     (   스프링에서 제공해주는 거!)

○ 기능 구현
   - 직원 정보 출력, 입력, 삭제, 수정 기능 구현
   - 지역 정보 출력, 입력, 삭제, 수정 기능 구현
   - 부서 정보 출력, 입력, 삭제, 수정 기능 구현
   - 직위 정보 출력, 입력, 삭제, 수정 기능 구현
   - 로그인 / 로그아웃 기능 구현
     → 관리자 및 일반 직원 로그인 구분
   ==> Spring MVC, JSP/Servlet, Oracle, HTML/CSS/Javascript, AJAX
       , jQuery, EL, JSTL 표현 등 사용

○ 사전 작업 → 테이블 및 시퀀스, 주요 쿼리문 구성
   - EMPLOYEE 직원
   - REGION 지역
   - DEPARTMENT 부서
   - POSITION 직위
   - 샘플 데이터 입력


○ 물리적 파일 구성 
   - mvc04_scott.sql		→ 데이터베이스 관련 객체 구성 및 실습 데이터 준비

   - Employee.java		→ DTO 개념. 직원 데이터 자료형 클래스.
   - Department.java		→ DTO 개념. 부서 데이터 자료형 클래스.
   - Region.java		→ DTO 개념. 지역 데이터 자료형 클래스.
   - Position.java		→ DTO 개념. 직위 데이터 자료형 클래스.

   - IEmployeeDAO.java		→ 인터페이스
   - IDepartmentDAO.java	→ 인터페이스 
   - IRegionDAO.java		→ 인터페이스 
   - IPositionDAO.java		→ 인터페이스

   - EmployeeDAO.java		→ 데이터베이스 액션 처리 클래스
				   직원 데이터 입출력 및 수정 삭제 액션
				   Connection 객체에 대한 의존성 주입 준비
				   (인터페이스 속성 구성 / setter 정의)
   - DepartmentDAO.java		→ 데이터베이스 액션 처리 클래스
				   부서 데이터 입출력 및 수정 삭제 액션
				   Connection 객체에 대한 의존성 주입 준비
				   (인터페이스 속성 구성 / setter 정의)
   - RegionDAO.java		→ 데이터베이스 액션 처리 클래스
				   지역 데이터 입출력 및 수정 삭제 액션
				   Connection 객체에 대한 의존성 주입 준비
				   (인터페이스 속성 구성 / setter 정의)
   - PositionDAO.java 		→ 데이터베이스 액션 처리 클래스
				   직위 데이터 입출력 및 수정 삭제 액션
				   Connection 객체에 대한 의존성 주입 준비
				   (인터페이스 속성 구성 / setter 정의)

   - EmployeeMenu.jsp		→ 메인 메뉴 뷰 페이지
   				   로그아웃 처리 기능
   - menuStyle.css		→ 메뉴 스타일 구성

   - EmployeeList.jsp		→ 직원 리스트 출력 페이지
   - main.css			→ 메인 스타일 구성



   - EmployeeListController.java
     (employeelist.action)
   → employeeList 돌아가게 만들려면 controller 하나 만들어야 해서
   아래에 있는 EmployeeListController.java 먼저 작업함

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록
   → list가 일하게 하려니까 web.xml 도 작업

   - dispatcher-servlet.xml	→ 컨트롤러 객체 등록
				   URL 주소 등록
				   SimpleDriverDataSource 객체 등록
				   의존 객체 주입 설정
				   DAO 객체 등록
   → 얘를 건드려야 listController 가 일할 수 있게 해주니까 
      얘 작업함

→ 여기까지 하면 list 페이지 보여지는 거 까지 가능해짐~



   - EmployeeInsertForm.jsp	→ 직원 데이터 입력 폼 페이지
				   AJAX, jQuery 기능 포함

employeelist view 폴더로 옮기고, action 속성 수정
dispatcher servlet에 employeeinsertformcontroller 구성하러 감

   - EmployeeInsertFormController.java
     (employeeinsertform.action)

EmployeeInsertForm.jsp 에 select option 저 상태로 하는 거 아니니까
수정하러 감

EmployeeInsertForm.jsp 에 jquery  구문 작성
생년월일 → 달력나오게
직위     → 직위에 맞게 기본급 설정되게

dispatcher-servlet: AJAX 관련 Controller 등록

   - AjaxController.java
     (Ajax.action)

   - Ajax.jsp			→ AJAX 객체 구성 페이지

그러면 Employeeinsertform.jsp 에서는 그럼 받은거 minbasicpay에 뿌릴거임
dispatcher-servlet에서 ajax에도 dao 주입

employeeinsertform 내용추가 (내용 다 채우고 submit 되도록, 기본급제대로 입력했는지)
dispatcher-servlet.xml → /employeeinsert.action 추가


   - EmployeeInsertController.java
     (employeeinsert.action)

dispatcher-servlet.xml → employeeinsert.action 안에 dao 추가


   - EmployeeUpdateForm.jsp	→ 직원 데이터 수정 폼 페이지
				   AJAX, jQuery 기능 포함

EmployeeList.jsp 수정버튼 변경하러감&script 작성
dispatcher-servlet → employeeupdateform.action 에 controller mapping 시켜줘야함

   - EmployeeUpdateFormController.java
     (employeeupdateform.action)

dispatcher-servlet → employeeupdateform.action 에 property 4개 주입
employeeupdateform.jsp 에 value 값 채워넣음 & ajax 처리살펴봄 (insert와 바뀐거 x)

dispatcher-servlet → employeeupdate.action
   - EmployeeUpdateController.java
     (employeeupdate.action)


   - EmployeeDeleteController.java
     (employeedelete.action)

--지역--

dispatcher-servlet.xml (/reglist.action)
   - RegListController.java
   - RegList.jsp

dispatcher-servlet.xml (/regioninsertform.action)
   - RegionInsertFormController.java
   - RegionInsertForm.jsp	→ 지역 데이터 입력 폼 페이지
dispatcher-servlet.xml (/regioninsert.action)
   - RegionInsertController.java

dispatcher-servlet.xml (/regionupdateform.action)
   - RegionUpdateFormController.java
   - RegionUpdateForm.jsp 	→ 지역 데이터 수정 폼 페이지
dispatcher-servlet.xml (/regionupdate.action)
   - RegionUpdateController.java

dispatcher-servlet.xml (/regiondelete.action)
   - RegionDeleteController.java

------



   - DepartmentList.jsp		→ 부서 리스트 출력 페이지

   - DepartmentInsertForm.jsp	→ 부서 데이터 입력 폼 페이지

   - DepartmentUpdateForm.jsp 	→ 부서 데이터 수정 폼 페이지


   - RegionList.jsp		→ 지역 리스트 출력 페이지

   - RegionInsertForm.jsp	→ 지역 데이터 입력 폼 페이지

   - RegionUpdateForm.jsp 	→ 지역 데이터 수정 폼 페이지


   - PositionList.jsp		→ 직위 리스트 출력 페이지

   - PositionInsertForm.jsp	→ 직위 데이터 입력 폼 페이지

   - PositionUpdateForm.jsp 	→ 직위 데이터 수정 폼 페이지





   - LoginForm.jsp		→ 관리자, 일반사원 로그인 폼 페이지
			  	   ID(employeeId), PW(주민번호 뒤 7자리) 입력.	
   - LogoutForm.jsp		→ 로그아웃 처리와 관련한 폼 페이지
 
   - EmpList.jsp		→ 일반 직원 전용 리스트 출력 페이지
				   로그아웃 처리
				   입력, 수정, 삭제 기능 없음




   - DepartmentListController.java
   - DepartmentInsertFormController.java
   - DepartmentInsertController.java
   - DepartmentUpdateFormController.java
   - DepartmentUpdateController.java
   - DepartmentDeleteController.java

	→ 실무에서는 action 으로 구분짓게 안나누고 
           그냥 DepartmentController.java 하나로 구성한다.


   - PositionListController.java
   - PositionInsertFormController.java
   - PositionInsertController.java
   - PositionUpdateFormController.java
   - PositionUpdateController.java
   - PositionDeleteController.java

   - LoginFormController.java
   - LoginController.java
   - LogoutController.java
   
   - EmpListController.java

   - ... 중략 ...

   - dispatcher-servlet.xml	→ 컨트롤러 객체 등록
				   URL 주소 등록
				   SimpleDriverDataSource 객체 등록
				   의존 객체 주입 설정
				   DAO 객체 등록

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록



○ 사용자 최초 요청 주소 
http://localhost:8090/mvc04/employeelist.action
http://localhost:8090/mvc04/emplist.action
http://localhost:8090/mvc04/loginform.action

1 admin
1234567

emplist
2 
2234567

emplist
1 
1234567

비밀번호 틀리면 넘어가면 안됨

※ 추후 우리는 실무 프로젝트를 수행하는 과정에서
   컨트롤러를 액션 단위가 아닌, 업무 단위로 묶어 작업 및 처리하게 될 것이다.
   이후, 어노테이션을 활용하여 컨트롤러를 지정해서 처리하는 것도 수행하게 될 것이다.
   하지만, 이번 실습 과정에서 기본 액션 단위의 컨트롤러 구성을 수행해 봄으로써
   Model-View_controller 의 기능 및 처리 흐름에 대해
   제대로 파악할 수 있도록 한다~!!!




















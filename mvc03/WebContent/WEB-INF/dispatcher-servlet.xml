<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan
		base-package="org.springframework.samples.petclinic.web" />
		
		<!-- ※ 사용자 정의 Controller 객체 등록 및 URL 매핑 주소 등록 -->
		<!--    - 『name=""』 속성에 매핑 주소를 등록한다. -->
		<!--      이 과정에서 Front Controller 가 갖고 있는 확장자의 형태로 구성한다. -->
		<!--    - 『class=""』 속성은 Controller 객체의 클래스 경로 및 이름을 등록한다. -->

		<!-- 클라이언트 직접 만나게 해주기 위해 컨트롤러 등록했었음 -->
		
		
		<!-- Datasource → 그 중에서도 → SimpleDriverDataSource -->
		<!-- class 입력할 때는 아무 class가서 저 이름 입력 후 import 구문 가져오기 -->
		<bean id="localDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<!-- ↓ SimpleDriverDataSource라는 클래스에 주요 속성으로 --> 
			<!-- ↓ driverClass 이름의 변수가 선언되어 있다는 뜻 -->
			<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="url" value="jdbc:oracle:thin:@211.238.142.152:1521:xe"></property>
			<property name="username" value="scott"></property>
			<property name="password" value="tiger"></property>
		</bean>
		
		<bean id="remoteDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<!-- ↓ SimpleDriverDataSource라는 클래스에 주요 속성으로 --> 
			<!-- ↓ driverClass 이름의 변수가 선언되어 있다는 뜻 -->
			<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="url" value="jdbc:oracle:thin:@211.238.142.153:1521:xe"></property>
			<property name="username" value="scott"></property>
			<property name="password" value="tiger"></property>
		</bean>
		
		<!-- └→ 이런식으로 사용할 수 있음 -->
		
		<!-- MemberDAO -->
		<!-- 여기는 아래에서 부를 때 고유한 값이 있어야 하니 id! -->
		<!-- 아래의 name과 여기 id 잘 구분하기 -->
		<bean id="memberDAO" class="com.test.mvc.MemberDAO">
			<!-- memberDAO 클래스는 뭘 필요로 함? → DataSource -->
			<property name="dataSource">
				<!-- 이 dataSource는 우리가 만들지 않았음 -->
				<!-- DataSource에 대한 bean 정보도 위에 등록하고 오자 -->
				
				<!-- 의존성 주입 -->
				<ref bean="localDataSource"/>
			</property>
		</bean>
		
		
		<!-- MemberListController -->
		<!-- <bean name="/memberlist.do" class="com.test.mvc.MemberListController"></bean> -->
		<!-- 
			예전엔 이렇게만 하면 끝났다. 
			그런데 이제 얘는 뭘 필요로 함 → DAO
		-->		
		<bean name="/memberlist.do" class="com.test.mvc.MemberListController">
			<property name="dao">
				<!-- 그러려면 MemberDAO 도 등록되어있어야 한다.  -->
				<!-- 위에 MemberDAO bean 등록하고 오자 -->
				
				<!-- 의존성 주입 -->
				<ref bean="memberDAO"/>
			</property>
		</bean>
		
		
		<!-- MemberInsertController -->
		<bean name="/memberinsert.do" class="com.test.mvc.MemberInsertController">
			<property name="dao">
				<ref bean="memberDAO"/>
			</property>
		</bean>
</beans>






